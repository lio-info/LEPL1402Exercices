import java.util.HashMap;
import java.util.Map;
import java.util.function.BiFunction;                   //Si vous ne savez pas ce qu'est HashMap :   https://www.w3schools.com/JAVA/java_hashmap.asp
import java.util.function.Function;

public class Evaluator {

    public BiFunction<Boolean, Boolean, Boolean> xor_gate() {
        return (b1, b2) -> !(b1 == b2);
    }

    public BiFunction<Boolean, Boolean, Boolean> or_gate() {
        return (b1 , b2) -> (b1 || b2);
    }

    public BiFunction<Boolean, Boolean, Boolean> and_gate() {
        return (b1 , b2) -> (b1 && b2);
    }

    public Function<Boolean, Boolean> not_gate() {
        return (b) -> !b;
    }


    // Should return a map containing the computation's results (use HashMap)
    // You're asked to store the results under the following keys: "SUM" & "carry_out"
    // TODO WARNING : ONLY USE the previously defined methods to compute the result
    // (INGInious will prevent you from cheating by directly invoking logical operators)

    public Map<String, Boolean> evaluate_circuit(Boolean a, Boolean b, Boolean carry_in) {
        HashMap<String , Boolean> map = new HashMap<>();
        boolean aXORb = xor_gate().apply(a,b);
        boolean aANDb = and_gate().apply(a,b);
        boolean sum = xor_gate().apply(aXORb , carry_in);
        boolean aXORbANDcin = and_gate().apply(aXORb , carry_in);
        boolean carryOut = or_gate().apply(aXORbANDcin , aANDb);

        map.put("SUM" , sum);
        map.put("carry_out" , carryOut);

        return map;
    }


}
