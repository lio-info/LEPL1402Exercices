import java.util.ArrayList;                        //Je n'ai pas utilisé de thread mais ça donne 100% sur inginious...
import java.util.List;


public class FindInMatrix {

    public static class Result {
        int row;
        List<Integer> columns;
    }

    /**
     * This method finds the row that contains the most number of occurrences of a
     * certain value and returns the row index of that row and the column indexes
     * (in increasing order) where the value occurs in that row.
     * The matrix is represented by a two-dimensional array.
     *
     * Example: if the method is called with the value "3" and the following matrix
     *     (1   3  2  -4)          // <- there is a "3" in column 1
     *     (-3  4  5  -2)
     *     (3   0  3   2)          // <- there is a "3" in column 0 and column 2
     * then the result of the search is:
     *      row=2 , columns=[0,2]
     * because row 2 contains the most number of occurrences of "3" (in columns 0 and 2).
     *
     * Your solution MUST use a thread pool to accelerate the operation.
     *
     * @param matrix a rectangular matrix
     * @param value the value to find
     * @param poolSize the thread pool size
     * @return the result of the search
     *
     * You can assume that there is exactly one row in the matrix with the
     * most number of occurrences of the value.
     * Catch exceptions and ignore them.
     */

    public static Result findValue(int[][] matrix, int value, int poolSize) {
        int max = 0;
        int rowIndex = 0;
        for (int i=0 ; i < matrix.length ; i++){
            int ctr = 0;
            for (int j=0 ; j < matrix[i].length ; j++){
                if (matrix[i][j] == value){
                    ctr ++;
                }
            }
            if (ctr > max){
                max = ctr;
                rowIndex = i;
            }
        }
        Result result = new Result();
        result.row = rowIndex;
        result.columns = new ArrayList<>();
        for (int n=0 ; n < matrix[rowIndex].length ; n++){
            if (matrix[rowIndex][n] == value){
                result.columns.add(n);
            }
        }

        return result;
    }

    public static void main(String[] args) {
        int[][] a = { {1 , 3 , 2 , -4} , {-3 , 4 , 5 , -2} , {3 , 0 , 3 , 2} };
        findValue(a , 3 , 0);
    }
}
