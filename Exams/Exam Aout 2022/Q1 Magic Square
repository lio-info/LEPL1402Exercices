public class MagicSquare {

    /**
     * Question 1 de l'exam d'Août 2022
     * Lors de la consultation des copies, les profs n'ont pas donné les tests qu'ils ont utilisés pour évaluer les codes.
     * J'ai donc ajouté quelques matrices spécifiques qui testent votre méthode dans la méthode main tout en bas.
     *
     *
     * A magic square is an (n x n) matrix such that:
     *
     * - all the positive numbers 1,2, ..., n*n are present (thus each number appears exactly once)
     * - the sums of the numbers in each row, each column and both main diagonals are the same
     *
     *   For instance a 3 x 3 magic square is the following
     *
     *   2 7 6
     *   9 5 1
     *   4 3 8
     *
     *   You have to implement the method that verifies if a matrix is a valid magic square
     */

    /**
     *
     * @param matrix a square matrix of size n x n (you can assume that "matrix" is never null)
     * @return true if matrix is a n x n magic square, false otherwise
     */
    public static boolean isMagicSquare(int [][] matrix) {
        //TODO

        return true;
    }

    


    //Ma solution qui a rapporté 100% :


    public static boolean isMagicSquareSolution(int[][] matrix){
        int l = matrix.length;

        int element = 1;
        while (element <= l*l){ //on check que la matrice contient bien chaque élément allant de 1 à n*n une et une seule fois
            int whileBreaker = 0;
            for (int i=0 ; i < l ; i++){
                for (int j=0 ; j < l ; j++){
                    if (matrix[i][j] == element){
                        element ++;
                        whileBreaker ++;
                    }
                }
            }
            if (whileBreaker == 0){
                return false;
            }
        }
        if (element != l*l +1){  //Je pense que ceci ne sert à rien, parce qu'il sera tjr true si on parvient à sortir
            return false;        //de la boucle while...
        }

        int sum = 0;
        for (int n=0 ; n < l ; n++){  //On détermine la valeur de sum qu'il faudra tester pour chaque ligne, colonne et diagonale
            sum += matrix[0][n];
        }

        if ( !(testRows(matrix , l , sum)) || !(testColumns(matrix , l , sum)) ||
                !(testDiagonal1(matrix , l ,sum)) || !(testDiagonal2(matrix , l ,sum)) ){
            return false; //on test que la somme des éléments de chaque ligne, colonne et diagonale == sum (voir methodes plus bas)
        }

        return true;
    }

    public static boolean testRows(int[][] matrix , int l , int sum){
        for (int i=0 ; i < l ; i++){
            int counter = 0;
            for (int j=0 ; j < l ; j++){
                counter += matrix[i][j];
            }
            if (counter != sum){
                return false;
            }
        }
        return true;
    }

    public static boolean testColumns(int[][] matrix , int l , int sum){
        for (int i=0 ; i < l ; i++){
            int counter = 0;
            for (int j=0 ; j < l  ; j++){
                counter += matrix[j][i];
            }
            if (counter != sum){
                return false;
            }
        }
        return true;
    }

    public static boolean testDiagonal1(int[][] matrix , int l , int sum){
        int counter = 0;
        for (int i=0 ; i < l ; i++){
            counter += matrix[i][i];
        }
        if (counter != sum){
            return false;
        }
        return true;
    }

    public static boolean testDiagonal2(int[][] matrix , int l , int sum){
        int counter = 0;
        for (int i = l-1 ; i >= 0 ; i--){
            counter += matrix[i][l-1-i];
        }
        if (counter != sum){
            return false;
        }
        return true;
    }
    
    
    

    public static void main(String[] args) {
        int[][] a = { {2,7,6} ,
                      {9,5,1} ,
                      {4,3,8} };

        int[][] b = { {-2,-7,-6} ,
                      {-9,-5,-1} ,
                      {-4,-3,-8} };

        int[][] c = { {2,4,9} ,
                      {7,8,1} ,
                      {6,3,5} };

        int[][] d = {{4}};
        int[][] e = {{1}};
        int[][] f = { {3,3,3} ,
                      {3,3,3} ,
                      {3,3,3} };

        int[][] g = { {1,9,5} ,
                      {9,5,1} ,
                      {5,1,9} };

        /*
        System.out.println(isMagicSquareSolution(a));
        System.out.println(isMagicSquareSolution(b));
        System.out.println(isMagicSquareSolution(c));
        System.out.println(isMagicSquareSolution(d));
        System.out.println(isMagicSquareSolution(e));
        System.out.println(isMagicSquareSolution(f));
        System.out.println(isMagicSquareSolution(g));
         */

        System.out.println(isMagicSquare(a));  //doit retourner true
        System.out.println(isMagicSquare(b));  //doit retourner false
        System.out.println(isMagicSquare(c));  //doit retourner false
        System.out.println(isMagicSquare(d));  //doit retourner false
        System.out.println(isMagicSquare(e));  //doit retourner true
        System.out.println(isMagicSquare(f));  //doit retourner false
        System.out.println(isMagicSquare(g));  //doit retourner false
        
    }
}
